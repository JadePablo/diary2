{"ast":null,"code":"import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport toPath from './to-path.js';\nconst DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nconst mapGitIgnorePatternTo = base => ignore => {\n  if (ignore.startsWith('!')) {\n    return '!' + path.posix.join(base, ignore.slice(1));\n  }\n  return path.posix.join(base, ignore);\n};\nconst parseGitIgnore = (content, options) => {\n  const base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(line => !line.startsWith('#')).map(mapGitIgnorePatternTo(base));\n};\nconst reduceIgnore = files => {\n  const ignores = gitIgnore();\n  for (const file of files) {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n  }\n  return ignores;\n};\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n  cwd = slash(cwd);\n  if (path.isAbsolute(p)) {\n    if (slash(p).startsWith(cwd)) {\n      return p;\n    }\n    throw new Error(`Path ${p} is not in cwd ${cwd}`);\n  }\n  return path.join(cwd, p);\n};\nconst getIsIgnoredPredicate = (ignores, cwd) => p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, toPath(p.path || p)))));\nconst getFile = async (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = await fs.promises.readFile(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\nconst getFileSync = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\nconst normalizeOptions = function () {\n  let {\n    ignore = [],\n    cwd = slash(process.cwd())\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ignore: [...DEFAULT_IGNORE, ...ignore],\n    cwd: toPath(cwd)\n  };\n};\nexport const isGitIgnored = async options => {\n  options = normalizeOptions(options);\n  const paths = await fastGlob('**/.gitignore', options);\n  const files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredicate(ignores, options.cwd);\n};\nexport const isGitIgnoredSync = options => {\n  options = normalizeOptions(options);\n  const paths = fastGlob.sync('**/.gitignore', options);\n  const files = paths.map(file => getFileSync(file, options.cwd));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredicate(ignores, options.cwd);\n};","map":{"version":3,"names":["process","fs","path","fastGlob","gitIgnore","slash","toPath","DEFAULT_IGNORE","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredicate","getFile","promises","readFile","getFileSync","readFileSync","normalizeOptions","arguments","length","undefined","isGitIgnored","paths","Promise","all","isGitIgnoredSync","sync"],"sources":["C:/Users/jadep/Desktop/diary2/diary2/client/node_modules/imagemin/node_modules/globby/gitignore.js"],"sourcesContent":["import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport toPath from './to-path.js';\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git',\n];\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath,\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredicate = (ignores, cwd) => p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, toPath(p.path || p)))));\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await fs.promises.readFile(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd()),\n} = {}) => ({ignore: [...DEFAULT_IGNORE, ...ignore], cwd: toPath(cwd)});\n\nexport const isGitIgnored = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', options);\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n\nexport const isGitIgnoredSync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', options);\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}