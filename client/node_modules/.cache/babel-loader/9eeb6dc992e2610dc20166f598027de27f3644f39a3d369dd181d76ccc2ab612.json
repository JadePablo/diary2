{"ast":null,"code":"import { Buffer } from 'node:buffer';\nimport { promises as fsPromises } from 'node:fs';\nimport { promisify } from 'node:util';\nimport path from 'node:path';\nimport fs from 'graceful-fs';\nimport FileType from 'file-type';\nimport { globby } from 'globby';\nimport pPipe from 'p-pipe';\nimport replaceExt from 'replace-ext';\nimport junk from 'junk';\nimport convertToUnixPath from 'slash';\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst handleFile = async (sourcePath, _ref) => {\n  let {\n    destination,\n    plugins = []\n  } = _ref;\n  if (plugins && !Array.isArray(plugins)) {\n    throw new TypeError('The `plugins` option should be an `Array`');\n  }\n  let data = await readFile(sourcePath);\n  data = await (plugins.length > 0 ? pPipe(...plugins)(data) : data);\n  const {\n    ext\n  } = (await FileType.fromBuffer(data)) || {\n    ext: path.extname(sourcePath)\n  };\n  let destinationPath = destination ? path.join(destination, path.basename(sourcePath)) : undefined;\n  destinationPath = ext === 'webp' ? replaceExt(destinationPath, '.webp') : destinationPath;\n  const returnValue = {\n    data,\n    sourcePath,\n    destinationPath\n  };\n  if (!destinationPath) {\n    return returnValue;\n  }\n  await fsPromises.mkdir(path.dirname(returnValue.destinationPath), {\n    recursive: true\n  });\n  await writeFile(returnValue.destinationPath, returnValue.data);\n  return returnValue;\n};\nexport default async function imagemin(input) {\n  let {\n    glob = true,\n    ...options\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!Array.isArray(input)) {\n    throw new TypeError(`Expected an \\`Array\\`, got \\`${typeof input}\\``);\n  }\n  const unixFilePaths = input.map(path => convertToUnixPath(path));\n  const filePaths = glob ? await globby(unixFilePaths, {\n    onlyFiles: true\n  }) : input;\n  return Promise.all(filePaths.filter(filePath => junk.not(path.basename(filePath))).map(async filePath => {\n    try {\n      return await handleFile(filePath, options);\n    } catch (error) {\n      error.message = `Error occurred when handling file: ${input}\\n\\n${error.stack}`;\n      throw error;\n    }\n  }));\n}\nimagemin.buffer = async function (input) {\n  let {\n    plugins = []\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!Buffer.isBuffer(input)) {\n    throw new TypeError(`Expected a \\`Buffer\\`, got \\`${typeof input}\\``);\n  }\n  if (plugins.length === 0) {\n    return input;\n  }\n  return pPipe(...plugins)(input);\n};","map":{"version":3,"names":["Buffer","promises","fsPromises","promisify","path","fs","FileType","globby","pPipe","replaceExt","junk","convertToUnixPath","readFile","writeFile","handleFile","sourcePath","_ref","destination","plugins","Array","isArray","TypeError","data","length","ext","fromBuffer","extname","destinationPath","join","basename","undefined","returnValue","mkdir","dirname","recursive","imagemin","input","glob","options","arguments","unixFilePaths","map","filePaths","onlyFiles","Promise","all","filter","filePath","not","error","message","stack","buffer","isBuffer"],"sources":["C:/Users/jadep/Desktop/diary2/diary2/client/node_modules/imagemin/index.js"],"sourcesContent":["import {Buffer} from 'node:buffer';\nimport {promises as fsPromises} from 'node:fs';\nimport {promisify} from 'node:util';\nimport path from 'node:path';\nimport fs from 'graceful-fs';\nimport FileType from 'file-type';\nimport {globby} from 'globby';\nimport pPipe from 'p-pipe';\nimport replaceExt from 'replace-ext';\nimport junk from 'junk';\nimport convertToUnixPath from 'slash';\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\n\nconst handleFile = async (sourcePath, {destination, plugins = []}) => {\n\tif (plugins && !Array.isArray(plugins)) {\n\t\tthrow new TypeError('The `plugins` option should be an `Array`');\n\t}\n\n\tlet data = await readFile(sourcePath);\n\tdata = await (plugins.length > 0 ? pPipe(...plugins)(data) : data);\n\n\tconst {ext} = await FileType.fromBuffer(data) || {ext: path.extname(sourcePath)};\n\tlet destinationPath = destination ? path.join(destination, path.basename(sourcePath)) : undefined;\n\tdestinationPath = ext === 'webp' ? replaceExt(destinationPath, '.webp') : destinationPath;\n\n\tconst returnValue = {\n\t\tdata,\n\t\tsourcePath,\n\t\tdestinationPath,\n\t};\n\n\tif (!destinationPath) {\n\t\treturn returnValue;\n\t}\n\n\tawait fsPromises.mkdir(path.dirname(returnValue.destinationPath), {recursive: true});\n\tawait writeFile(returnValue.destinationPath, returnValue.data);\n\n\treturn returnValue;\n};\n\nexport default async function imagemin(input, {glob = true, ...options} = {}) {\n\tif (!Array.isArray(input)) {\n\t\tthrow new TypeError(`Expected an \\`Array\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst unixFilePaths = input.map(path => convertToUnixPath(path));\n\tconst filePaths = glob ? await globby(unixFilePaths, {onlyFiles: true}) : input;\n\n\treturn Promise.all(\n\t\tfilePaths\n\t\t\t.filter(filePath => junk.not(path.basename(filePath)))\n\t\t\t.map(async filePath => {\n\t\t\t\ttry {\n\t\t\t\t\treturn await handleFile(filePath, options);\n\t\t\t\t} catch (error) {\n\t\t\t\t\terror.message = `Error occurred when handling file: ${input}\\n\\n${error.stack}`;\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}),\n\t);\n}\n\nimagemin.buffer = async (input, {plugins = []} = {}) => {\n\tif (!Buffer.isBuffer(input)) {\n\t\tthrow new TypeError(`Expected a \\`Buffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tif (plugins.length === 0) {\n\t\treturn input;\n\t}\n\n\treturn pPipe(...plugins)(input);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}