{"ast":null,"code":"import axios from 'axios';\nconst URL = \"http://localhost:5000\";\n\n// Function to handle login success and verify the token\nasync function handleLoginSuccess(token) {\n  try {\n    const response = await axios.get(`${URL}/decode`, {\n      params: {\n        credential: token.credential\n      }\n    });\n    const decodedToken = response.data;\n    // Use the user information as needed\n    return decodedToken;\n  } catch (error) {\n    throw new Error('Token verification failed');\n  }\n}\n\n// Function to post a new journal entry\nasync function postNewEntry(entryData) {\n  try {\n    const response = await axios.post(`${URL}/upload`, entryData);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to post journal entry');\n  }\n}\n\n// Function to update online status\nasync function updateOnlineStatus(email) {\n  try {\n    const response = await axios.put(`${URL}/online-status`, {\n      params: {\n        email\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to update online status');\n  }\n}\n\n// Function to get journal entries\nasync function getJournalEntries(email) {\n  try {\n    const response = await axios.get(`${URL}/journal-entries`, {\n      params: {\n        email\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to retrieve journal entries');\n  }\n}\n\n// Function to update online status\nasync function update_OnlineStatus(email) {\n  try {\n    const response = await axios.put();\n  } catch (error) {\n    throw new Error('Failed to update online status');\n  }\n}\nexport { handleLoginSuccess, postNewEntry, updateOnlineStatus, getJournalEntries, update_OnlineStatus };","map":{"version":3,"names":["axios","URL","handleLoginSuccess","token","response","get","params","credential","decodedToken","data","error","Error","postNewEntry","entryData","post","updateOnlineStatus","email","put","getJournalEntries","update_OnlineStatus"],"sources":["C:/Users/jadep/Desktop/diary2/diary2/client/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = \"http://localhost:5000\";\r\n\r\n// Function to handle login success and verify the token\r\nasync function handleLoginSuccess(token) {\r\n  try {\r\n    const response = await axios.get(`${URL}/decode`, {\r\n      params: {\r\n        credential: token.credential,\r\n      },\r\n    });\r\n    const decodedToken = response.data;\r\n    // Use the user information as needed\r\n    return decodedToken;\r\n  } catch (error) {\r\n    throw new Error('Token verification failed');\r\n  }\r\n}\r\n\r\n// Function to post a new journal entry\r\nasync function postNewEntry(entryData) {\r\n  try {\r\n    const response = await axios.post(`${URL}/upload`, entryData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to post journal entry');\r\n  }\r\n}\r\n\r\n// Function to update online status\r\nasync function updateOnlineStatus(email) {\r\n  try {\r\n    const response = await axios.put(`${URL}/online-status`, {\r\n      params: {\r\n        email,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to update online status');\r\n  }\r\n}\r\n\r\n// Function to get journal entries\r\nasync function getJournalEntries(email) {\r\n  try {\r\n    const response = await axios.get(`${URL}/journal-entries`, {\r\n      params: {\r\n        email,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to retrieve journal entries');\r\n  }\r\n}\r\n\r\n// Function to update online status\r\nasync function update_OnlineStatus(email) {\r\n  try {\r\n    const response = await axios.put()\r\n  } catch (error) {\r\n    throw new Error('Failed to update online status')\r\n  }\r\n}\r\n\r\nexport { handleLoginSuccess, postNewEntry, updateOnlineStatus, getJournalEntries, update_OnlineStatus };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAG,uBAAuB;;AAEnC;AACA,eAAeC,kBAAkBA,CAACC,KAAK,EAAE;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEJ,GAAI,SAAQ,EAAE;MAChDK,MAAM,EAAE;QACNC,UAAU,EAAEJ,KAAK,CAACI;MACpB;IACF,CAAC,CAAC;IACF,MAAMC,YAAY,GAAGJ,QAAQ,CAACK,IAAI;IAClC;IACA,OAAOD,YAAY;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF;;AAEA;AACA,eAAeC,YAAYA,CAACC,SAAS,EAAE;EACrC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAAE,GAAEb,GAAI,SAAQ,EAAEY,SAAS,CAAC;IAC7D,OAAOT,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF;;AAEA;AACA,eAAeI,kBAAkBA,CAACC,KAAK,EAAE;EACvC,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CAACiB,GAAG,CAAE,GAAEhB,GAAI,gBAAe,EAAE;MACvDK,MAAM,EAAE;QACNU;MACF;IACF,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF;;AAEA;AACA,eAAeO,iBAAiBA,CAACF,KAAK,EAAE;EACtC,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEJ,GAAI,kBAAiB,EAAE;MACzDK,MAAM,EAAE;QACNU;MACF;IACF,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;EACvD;AACF;;AAEA;AACA,eAAeQ,mBAAmBA,CAACH,KAAK,EAAE;EACxC,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CAACiB,GAAG,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF;AAEA,SAAST,kBAAkB,EAAEU,YAAY,EAAEG,kBAAkB,EAAEG,iBAAiB,EAAEC,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}